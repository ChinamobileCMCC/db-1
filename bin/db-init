#!/bin/sh

bin=$(dirname $0)
source "${bin}/include/all"

if [ ! -d "${repository}" ]; then
  mkdir -p "${repository}"
fi

server="${2}"
ssh="${3}"
host="${4}"
username="${5}"
password="${6}"
database="${7}"

write_config()
{
  _server=$1
  _config="${repository}/${_server}/config"
  _credentials="${_config}/credentials.cnf"
  _db_file="${_config}/database"
  _dumps="${repository}/${_server}/dumps"
  _ssh_config="${_config}/ssh.cnf"

  if [ ! -d "${_config}" ]; then
    mkdir -p "${_config}"
  fi

  if [ ! -d "${_dumps}" ]; then
    mkdir -p "${_dumps}"
  fi

  echo "[client]" > "${_credentials}"
  echo "user = ${username}" >> "${_credentials}"
  echo "password = ${password}" >> "${_credentials}"
  echo "host = ${host}" >> "${_credentials}"

  chmod 600 "${_credentials}"

  echo "${database}" > "${_db_file}"
  chmod 600 "${_db_file}"

  if [[ ! -z "${ssh// }" ]]; then
    echo "${ssh}" > "${_ssh_config}"
  else
    if [[ -f "${_ssh_config}" ]]; then
      rm "${_ssh_config}"
    fi
  fi
}

test_config()
{
  _server=$1
  _config="${repository}/${_server}/config/"
  _credentials="${_config}credentials.cnf"
  _ssh_config="${_config}/ssh.cnf"
  _db_file="${_config}/database"
  if [[ -f "${_ssh_config}" ]]; then
    where=`cat "${_ssh_config}"`
    _user=$(cat "${_credentials}" | grep "^user" | cut -d '=' -f 2 | xargs)
    _pass=$(cat "${_credentials}" | grep "^password" | cut -d '=' -f 2 | xargs)
    _host=$(cat "${_credentials}" | grep "^host" | cut -d '=' -f 2 | xargs)
    _database=$(cat "${_db_file}")
    cmd="mysql --user=\"$_user\" --host=\"$_host\" --password=\"$_pass\" -e\"quit\" $_database"
    ssh ${where} "${cmd}"
    return "${?}"
  else
    "${mysql}" --defaults-extra-file="${_credentials}" -e"quit" >/dev/null
    return "${?}"
  fi
}

delete_config()
{
  # I don't like 'rm -rf' for these cases
  _server=$1
  _config="${repository}/${_server}/config"
  _credentials="${_config}/credentials.cnf"
  _db_file="${_config}/database"
  _dumps="${repository}/${_server}/dumps"
  _ssh_config="${_config}/ssh.cnf"

  rm "${_credentials}"
  rm "${_db_file}"
  if [ -f "${_ssh_config}" ]; then
    rm "${_ssh_config}"
  fi
  rmdir "${_config}"
  rmdir "${_dumps}"
  rmdir "${repository}/${_server}"
}

if [ "$#" -ne 7 ]; then
  echo "Usage: db init (identifier) (ssh) (hostname) (username) (password) (database)"
fi

while true; do
  if [ "$#" -ne 7 ]; then

    echo "\n${COLOR_LIGHT_BLUE}Please provide the connection details for the database${COLOR_NC}"
    user_input "Server" "Please provide a meaningful server name to refer to this database, such as 'local', 'development', 'staging', ..." "local" 0
    server=${answer}

    user_input "Ssh login, e.g. user@hostname.com" "Please provide the username and host of the remote server" "" 1
    ssh=${answer}

    user_input "Database host" "Please provide a database hostname" "127.0.0.1" 0
    host=${answer}

    user_input "Username" "Please provide a username" "root" 0
    username=${answer}

    user_input "Password" "Please provide the password for user '${username}'" "" 1
    password=${answer}

    user_input "Database" "Please provide the name of a database" "" 0
    database=${answer}
  else
    # remove host, user, password etc from command line arguments
    shift 6
  fi

  ts=$(date +%Y%m%d-%H%M%S)
  test="test-${ts}"
  write_config "${test}"
  test_config "${test}"
  code="${?}"
  delete_config "${test}"

  if [ "${code}" -eq 1 ]; then
    echo "${COLOR_RED}Could not connect to database. Please try again.${COLOR_NC}"
    continue
  else
    echo "${COLOR_GREEN}Successfully connected to database. Writing config.${COLOR_NC}"
  fi

  write_config "${server}"
  exit 0
done
